@model NewPasswordViewModel

@{
    Layout = null;
}

@{
    if (TempData["Message"] is not null)
    {
        <div class="alert custom-alert-success mt-5">
            @TempData["Message"]
        </div>
    }

    if (TempData["ErrorMessage"] is not null)
    {
        <div class="alert custom-alert-error mt-5">
            @TempData["ErrorMessage"]
        </div>
    }

    if (ViewData["Message"] is not null)
    {
        <div class="alert custom-alert-success mt-5">
            @ViewData["Message"]
        </div>
    }

    if (ViewData["ErrorMessage"] is not null)
    {
        <div class="alert custom-alert-error mt-5">
            @ViewData["ErrorMessage"]
        </div>
    }
}

<!DOCTYPE html>
<html lang="tr">
<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet">

</head>

<body>
    <div class="form-gap"></div>
    <div class="container">
        <div class="row">
            <div class="col-md-4 col-md-offset-4">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div class="text-center">
                            <h3><i class="fa fa-lock fa-4x"></i></h3>
                            <h2 class="text-center">Doğrulama başarılı.</h2>
                            <p>Şifrenizi yenileyebilirsiniz.</p>
                            <div class="panel-body">

                                <form asp-controller="Auth" asp-action="RenewPassword" id="register-form" role="form" autocomplete="off" class="form" method="post">

                                    <input type="hidden" asp-for="Email" />

                                    <input type="hidden" asp-for="Token" />

                                    <div class="form-group">
                                        <div class="input-group">
                                            <span class="input-group-addon">
                                                <i class="glyphicon glyphicon-lock color-blue"></i>
                                            </span>
                                            <input asp-for="Password" placeholder="Şifre" class="form-control" type="password">
                                        </div>
                                        <span id="PasswordError" class="text-danger"></span>
                                        <span class="text-danger" asp-validation-for="Password"></span>
                                    </div>

                                    <div class="form-group">
                                        <div class="input-group">
                                            <span class="input-group-addon">
                                                <i class="glyphicon glyphicon-lock color-blue"></i>
                                            </span>
                                            <input asp-for="ConfirmPassword" placeholder="Şifre tekrar" class="form-control" type="password">
                                        </div>
                                        <span id="ConfirmPasswordError" class="text-danger"></span>
                                        <span class="text-danger" asp-validation-for="ConfirmPassword"></span>
                                    </div>


                                    <div class="form-group">
                                        <button class="btn btn-lg btn-primary btn-block" type="submit">Şifreyi Yenile</button>
                                    </div>

                                </form>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</body>
</html>
<style>
    .custom-alert-success {
        position: fixed; /* Sayfada sabit konumlandırma */
        top: 25px; /* Ekranın üst kısmından 10px boşluk */
        left: 50%; /* Ekranın ortasına hizalama */
        transform: translateX(-50%); /* Ortalamak için translate */
        z-index: 1000; /* Diğer elementlerin üstünde görünmesini sağlar */
        background-color: wheat; /* Arka plan rengi */
        color: #6b4f3a; /* Yazı rengi (daha koyu bir ton) */
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .custom-alert-error {
        position: fixed; /* Sayfada sabit konumlandırma */
        top: 25px; /* Ekranın üst kısmından 10px boşluk */
        left: 50%; /* Ekranın ortasına hizalama */
        transform: translateX(-50%); /* Ortalamak için translate */
        z-index: 1000; /* Diğer elementlerin üstünde görünmesini sağlar */
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-gap {
        padding-top: 70px;
    }
</style>

<script>

    document.addEventListener('DOMContentLoaded', function () {
        // Hem success hem de error alert'lerini seç
        var alerts = document.querySelectorAll('.custom-alert-success, .custom-alert-error');

        alerts.forEach(function (alert) {
            if (alert) {
                setTimeout(function () {
                    alert.style.transition = 'opacity 0.5s ease';
                    alert.style.opacity = '0';
                    setTimeout(function () {
                        alert.remove();
                    }, 500); // Görsel olarak kaybolduktan sonra tamamen kaldır
                }, 5000); // 5 saniye sonra kaybolmaya başla
            }
        });

        const form = document.querySelector("form");

        // Inputlar ve hata mesajları
        const inputs = {
            Password: document.querySelector("#Password"),
            ConfirmPassword: document.querySelector("#ConfirmPassword")
        };

        const errors = {
            Password: document.querySelector("#PasswordError"),
            ConfirmPassword: document.querySelector("#ConfirmPasswordError")
        };

        // Validasyon fonksiyonları
        function validateNotEmpty(value) {
            return value.trim().length > 0;
        }

        function validateMaxLength(value, max) {
            return value.length <= max;
        }

        function validateMinLength(value, min) {
            return value.length >= min;
        }

        function validateConfirmPassword(password, confirmPassword) {
            return password === confirmPassword;
        }

        function showError(input, message) {
            errors[input].textContent = message;
        }

        function clearError(input) {
            errors[input].textContent = "";
        }

        function validateInput(event) {
            const { name, value } = event.target;

            switch (name) {

                case "Password":
                    if (!validateNotEmpty(value)) showError(name, "Şifre gereklidir.");
                    else if (!validateMinLength(value, 8)) showError(name, "Şifre minimum 8 karakter olabilir.");
                    else if (!validateMaxLength(value, 15)) showError(name, "Şifre en fazla 15 karakter olabilir.");
                    else clearError(name);

                    // Eğer şifre değişirse ConfirmPassword'u tekrar kontrol et
                    validateInput({ target: inputs.ConfirmPassword });

                    break;

                case "ConfirmPassword":
                    if (!validateNotEmpty(value)) showError(name, "Şifre tekrar alanı gereklidir.");
                    else if (!validateConfirmPassword(inputs.Password.value, value)) showError(name, "Şifreler eşleşmiyor.");
                    else clearError(name);
                    break;
            }
        }

        // Canlı validasyon için event ekleme
        Object.values(inputs).forEach(input => {
            input.addEventListener("input", validateInput);
            input.addEventListener("blur", validateInput);
        });

        // Form gönderilmeden önce kontrol
        form.addEventListener("submit", function (event) {
            let isValid = true;

            Object.values(inputs).forEach(input => {
                const event = new Event("input");
                input.dispatchEvent(event);

                if (errors[input.name].textContent !== "") {
                    isValid = false;
                }
            });

            if (!isValid) {
                event.preventDefault(); // Formun gönderilmesini engelle
            }
        });


    });

</script>