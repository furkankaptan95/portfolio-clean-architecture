@model AddBlogPostViewModel

@{
    ViewData["Title"] = "Blog Post - Ekle";
}

<div class="row justify-content-center">
    <div class="col-md-5">
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Blog Post</h5>
                <small class="text-muted float-end">Ekleme</small>
            </div>
            <div class="card-body">

                <form asp-action="Create" asp-controller="BlogPost" method="post">

                    @* @Html.AntiForgeryToken() *@

                    <div class="mb-3 mt-3">
                        <label asp-for="Title" class="form-label mb-1">Başlık</label>
                        <input asp-for="Title" class="form-control" placeholder="Başlığı buraya yazınız" />
                        <span id="titleError" class="text-danger"></span> 
                    </div>

                    <div class="mb-3">
                        <label asp-for="Content" class="form-label mb-1">İçerik</label>
                        <textarea asp-for="Content" class="form-control" rows="10" placeholder="Post içeriğini buraya yazınız"></textarea>
                        <span id="contentError" class="text-danger"></span> 
                    </div>

                    <button type="submit" class="btn btn-primary">Ekle</button>
                </form>

            </div>
        </div>
    </div>
</div>


@section Scripts {

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.querySelector("form");

            // Inputlar ve hata mesajları
            const inputs = {
                Title: document.querySelector("#Title"),
                Content: document.querySelector("#Content")
            };

            const errors = {
                Title: document.querySelector("#titleError"),
                Content: document.querySelector("#contentError")
            };

            // Validasyon fonksiyonları
            function validateNotEmpty(value) {
                return value.trim().length > 0;
            }

            function validateMaxLength(value, max) {
                return value.length <= max;
            }

            function showError(input, message) {
                errors[input].textContent = message;
            }

            function clearError(input) {
                errors[input].textContent = "";
            }

            function validateInput(event) {
                const { name, value } = event.target;

                switch (name) {
                    case "Title":
                        if (!validateNotEmpty(value)) showError(name, "Başlık gereklidir.");
                        else if (!validateMaxLength(value, 100)) showError(name, "Başlık en fazla 100 karakter olabilir.");
                        else clearError(name);
                        break;

                    case "Content":
                        if (!validateNotEmpty(value)) showError(name, "İçerik gereklidir.");
                        else clearError(name);
                        break;
                }
            }

            // Canlı validasyon için event ekleme
            Object.values(inputs).forEach(input => {
                input.addEventListener("input", validateInput);
                input.addEventListener("blur", validateInput);
            });

            // Form gönderilmeden önce kontrol
            form.addEventListener("submit", function (event) {
                let isValid = true;

                Object.values(inputs).forEach(input => {
                    const event = new Event("input");
                    input.dispatchEvent(event);

                    if (errors[input.name].textContent !== "") {
                        isValid = false;
                    }
                });

                if (!isValid) {
                    event.preventDefault(); // Formun gönderilmesini engelle
                }
            });
        });
    </script>



}
